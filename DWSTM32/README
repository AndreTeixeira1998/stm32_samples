
So I had bought a handful or so STM32F031F4P6 parts, loose parts not
on a board.  The STM32F031F4P6 I put them on a generic breakout that
I found on ebay for about a buck a board.  Since then I went and
made a breakout design that was under a buck a board and a slightly
more complicated breakout that this directory will cover.  The
DWSTM32.brd file you can open with eagle and see the board (go to
oshpark and make some yourself).  I have a pdf here as well.  I am
currently using 130 Ohm resistors with the leds and 10K for the pull
up/down.

Not obvious necessarily but the top pins are for my favorite ftdi board

https://www.sparkfun.com/products/retired/718

Now retired, not that it is an exceptional board, just that I bought
a handful of them and have them always within arms reach.

Bare minimum you only need to hookup GND TX RX and VCC.  Can use any
ftdi or other breakout board or similar cable that you might use on a
raspberry pi or other 3.3V board.  Like the STM32F031F4P6 examples
you can certainly use an SWD Jtag solution like an stlink.

       GND TX RX VCC

BOOT0                SWCLK
PF0                  SWDIO
PF1                  RX
NRST                 TX
VDDA                 VCC
PA0                  GND
PA1                  PB1
PA2                  PA7
PA3                  PA6
PA4 (led)            PA5 (led)

All this breakout basically did was what I did on the STM32F031F4P6
samples grounding some stuff, wiring some stuff to 3.3, etc.  I put a
reset and boot0 button on here making that so much easier.  Hold the
boot0 and press reset and you are in the ST bootloader, no jtag
required.

I work with a number of folks that can do good soldering work, but
wanted to learn on my own.  My first SMT IC was done by reading this

http://goodfet.sourceforge.net/construction/

and I made mistakes.  When he says run across, you need to not use
any friction the pins bend really easy, esp when hot.  First time
I tried it I slid the wick across and bent all the pins on one side.
Oops...buy multiples of everything, expect to mess up.

I still need to read up on the right way to know the orientation of
the leds.  I got lazy and put one one way, one the other, the one
that lit up was right, removed the other and put another on the
same way as the working one.

For these samples you will want the documentation on the STM32F031F4P6
part from ST for information on how to write programs for the part.

Erase is actually the first example, erases the part using the internal
bootloader, sign of life for the board.

Then uloader takes the blinker01 flash output and programs it into the
part.

For both of these press and hold boot0, then press and release reset,
then release boot0 to put it in the internal bootloader.  After using
uloader to program the flash, press and release reset without touching
boot0 and it will start blinking the leds (did you solder them on
right? 50/50 chance unless you do the research/testing first)

The flash and sram binaries are slightly different.  The issue is
that ARM switched from the full sized 32 bit processors scheme of
the reset vector is an instruction you execute (a branch basically)
but the cortex-m processors use a traditional table of addresses.
So on flash you have to boot using the table of addresses and that is
the first thing.  For sram, you dont have to but what I have is the
first instruction in the binary is the first one you want to execute.
The sram version is for use with jtag (maybe later with my own
bootloader will see), doesnt make sense otherwise.  You could arguably
know the offset where the reset vector code lives and start the
jtag execution there, but the second difference is the flash version
is linked for the flash address space and sram for the sram address
space.  So blinker01 and other examples will have both sram and flash
versions.

For using the jtag, see the STM32F031F4P6 directory README.
